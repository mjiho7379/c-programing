#include <stdio.h>

#define MAX_PRODUCTS 100

void input_stock(int* stock, int n) {
    printf("입고 수량을 입력하세요: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &stock[i]);
    }
}

void input_sold(int* sold, int n) {
    printf("판매 수량을 입력하세요: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &sold[i]);
    }
}

void calculate_inventory(int* inventory, int* stock, int* sold, int n) {
    for (int i = 0; i < n; i++) {
        inventory[i] = stock[i] - sold[i];
    }
}

void print_inventory(int* inventory, int n) {
    printf("재고 수량: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", inventory[i]);
    }
    printf("\n");
}

void calculate_sales(int* stock, int* sold, int n) {
    int total_sales = 0, total_stock = 0;
    for (int i = 0; i < n; i++) {
        total_sales += sold[i];
        total_stock += stock[i];
    }
    double rate = (double)total_sales / total_stock * 100.0;
    printf("총 판매량: %d (판매율: %.2f%%)\n", total_sales, rate);
}

void find_max_sold(int* sold, int n) {
    int max = sold[0];
    int id = 1;
    for (int i = 1; i < n; i++) {
        if (sold[i] > max) {
            max = sold[i];
            id = i + 1;
        }
    }
    printf("가장 많이 판매된 상품: ID %d, 판매량 %d\n", id, max);
}

void find_min_sold(int* sold, int n) {
    int min = sold[0];
    int id = 1;
    for (int i = 1; i < n; i++) {
        if (sold[i] < min) {
            min = sold[i];
            id = i + 1;
        }
    }
    printf("가장 적게 판매된 상품: ID %d, 판매량 %d\n", id, min);
}

void check_low_inventory(int* inventory, int n) {
    for (int i = 0; i < n; i++) {
        if (inventory[i] <= 2) {
            printf("상품 ID %d: 재고 부족 (%d)\n", i + 1, inventory[i]);
        }
    }
}

int main() {
    int n;
    int stock[MAX_PRODUCTS], sold[MAX_PRODUCTS], inventory[MAX_PRODUCTS];

    printf("상품 개수를 입력하세요: ");
    scanf("%d", &n);

    input_stock(stock, n);
    input_sold(sold, n);
    calculate_inventory(inventory, stock, sold, n);
    print_inventory(inventory, n);
    calculate_sales(stock, sold, n);
    find_max_sold(sold, n);
    find_min_sold(sold, n);
    check_low_inventory(inventory, n);

    return 0;
}
